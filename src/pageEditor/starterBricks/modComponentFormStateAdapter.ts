/*
 * Copyright (C) 2024 PixieBrix, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import type React from "react";
import { type IconProp } from "@fortawesome/fontawesome-svg-core";
import { type Metadata } from "@/types/registryTypes";
import { type StarterBrickDefinitionLike } from "@/starterBricks/types";
import { type StarterBrickType } from "@/types/starterBrickTypes";
import type { DraftModComponent } from "@/contentScript/pageEditor/types";
import { type ModComponentBase } from "@/types/modComponentTypes";
import { type Target } from "@/types/messengerTypes";
import { type BaseFormState } from "@/pageEditor/baseFormStateTypes";
import { type Nullishable } from "@/utils/nullishUtils";

/**
 * Adapter used to create initial mod component form state in the Page Editor from a starter brick.
 */
export interface ModComponentFormStateAdapter<
  TResult = unknown,
  TState extends BaseFormState = BaseFormState,
> {
  /**
   * The internal starter brick type, e.g., menuItem, contextMenu, etc.
   */
  readonly elementType: StarterBrickType;

  /**
   * The StarterBrickConfig class corresponding to the starter brick
   * @see StarterBrickDefinitionLike
   */
  // eslint-disable-next-line @typescript-eslint/ban-types -- we want to Ctor here for the starter brick
  readonly baseClass: Function;

  readonly EditorNode?: React.ComponentType<{ isLocked: boolean }>;

  /**
   * Order to display the starter brick in the "Add Starter Brick" dropdown in the Page Editor
   */
  readonly displayOrder: number;

  /**
   * The human-friendly name to refer to the starter brick type (e.g., Context Menu)
   */
  readonly label: string;

  /**
   * FontAwesome icon representing the starter brick type
   */
  readonly icon: IconProp;

  /**
   * Feature flag that indicates whether the starter brick type is enabled for the user. `undefined` to indicate
   * all users should be able to create/edit the starter bricks of this type.
   */
  readonly flag?: string;

  /**
   * Method for the user to select an element from the host page (e.g., placing a menu button).
   * `undefined` for starter bricks that aren't placed natively in the host page (e.g., context menus)
   * @param target the tab on which to run the function
   */
  readonly selectNativeElement?: (
    target: Target,
    useNewFilter?: boolean,
  ) => Promise<TResult>;

  /**
   * Returns the initial mod component form state for a new mod component (including new foundation)
   * @param url the URL of the current page
   * @param metadata the initial metadata for the new mod component
   * @param element the result of the `selectNativeElement` method
   */
  readonly fromNativeElement: (
    url: string,
    metadata: Metadata,
    element: Nullishable<TResult>,
  ) => TState;

  /**
   * Returns a draft mod component definition that the content script can render on the page
   */
  readonly asDraftModComponent: (state: TState) => DraftModComponent;

  /**
   * Returns the FormState corresponding to mod component
   */
  readonly fromModComponent: (
    modComponent: ModComponentBase,
  ) => Promise<TState>;

  /**
   * Returns the starter brick definition corresponding to the mod component form state.
   */
  readonly selectStarterBrickDefinition: (
    modComponentFormState: TState,
  ) => StarterBrickDefinitionLike;

  /**
   * Returns the mod component corresponding to the mod component form state.
   *
   * NOTE: If the mod component uses an innerDefinition for the starter brick, the starter brick id will point to the
   * temporary `@inner/` RegistryId generated by the Page Editor.
   *
   * @see isInnerStarterBrick
   * @see modComponentWithInnerDefinitions
   */
  readonly selectModComponent: (
    modComponentFormState: TState,
  ) => ModComponentBase;
}
