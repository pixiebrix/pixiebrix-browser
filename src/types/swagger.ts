/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/audit/organizations/{id}/": {
    get: operations["listAuditEvents"];
  };
  "/api/audit/groups/{id}/": {
    get: operations["listAuditGroups"];
  };
  "/api/audit/deployments/{id}/": {
    get: operations["listAuditDeployments"];
  };
  "/api/blocks/": {
    /** List config of current version of each package. */
    get: operations["listPackageConfigLists"];
  };
  "/api/bricks/": {
    get: operations["listPackageMetas"];
    post: operations["createPackage"];
  };
  "/api/bricks/{id}/": {
    get: operations["retrievePackage"];
    put: operations["updatePackage"];
    delete: operations["destroyPackage"];
  };
  "/api/bricks/{id}/versions/": {
    get: operations["listPackageVersions"];
  };
  "/api/databases/": {
    get: operations["listUserDatabases"];
    post: operations["createUserDatabase"];
  };
  "/api/databases/{id}/": {
    get: operations["retrieveUserDatabase"];
    delete: operations["destroyUserDatabase"];
    patch: operations["updateUserDatabase"];
  };
  "/api/databases/{database_pk}/records/": {
    get: operations["listRecords"];
    put: operations["updateRecord"];
    post: operations["createRecord"];
  };
  "/api/databases/{database_pk}/records/{key}/": {
    get: operations["retrieveRecordDetail"];
    put: operations["updateRecordDetail"];
  };
  "/api/deployments/": {
    /** View for individual users to report/retrieve available deployments. */
    get: operations["listUserDeploymentDetails"];
    /** Record which deployments the user has installed, and return list of available deployments. */
    post: operations["telemetryListUserDeploymentDetail"];
  };
  "/api/deployments/{id}/": {
    /** View for admins to get/create/update/delete deployments */
    get: operations["retrievePackageDeployment"];
    /** View for admins to get/create/update/delete deployments */
    put: operations["updatePackageDeployment"];
    /** View for admins to get/create/update/delete deployments */
    delete: operations["destroyPackageDeployment"];
    /** View for admins to get/create/update/delete deployments */
    patch: operations["partialUpdatePackageDeployment"];
  };
  "/api/deployments/{deployment_pk}/reports/": {
    get: operations["listDeploymentReportMetadatas"];
  };
  "/api/deployments/{deployment_pk}/reports/{id}/": {
    get: operations["retrieveDeploymentReport"];
  };
  "/api/deployments/{id}/groups/": {
    get: operations["listDeploymentPermissions"];
    post: operations["createDeploymentPermission"];
  };
  "/api/deployments/{id}/users/": {
    get: operations["listActiveDeployments"];
  };
  "/api/extension-points/": {
    /** List config of current version of each package. */
    get: operations["listExtentionPoints"];
  };
  "/api/extension/token/": {
    /** Return the token for the current user. */
    get: operations["retrieveExtensionToken"];
  };
  "/api/extensions/": {
    get: operations["listUserExtensions"];
  };
  "/api/extensions/{id}/": {
    get: operations["retrieveUserExtension"];
    put: operations["updateUserExtension"];
    delete: operations["destroyUserExtension"];
  };
  "/api/featured/recipes/": {
    /** List config of current version of each package. */
    get: operations["listFeaturedRecipes"];
  };
  "/api/groups/{id}/permissions/": {
    get: operations["listGroupPackagePermissions"];
    post: operations["createGroupPackagePermission"];
  };
  "/api/groups/{id}/integrations/": {
    get: operations["listServiceAuthPermissions"];
    post: operations["createServiceAuthPermission"];
  };
  "/api/groups/{group_pk}/integrations/{id}/": {
    get: operations["retrieveServiceAuthPermission"];
    put: operations["updateServiceAuthPermission"];
    delete: operations["destroyServiceAuthPermission"];
    patch: operations["partialUpdateServiceAuthPermission"];
  };
  "/api/groups/{id}/": {
    get: operations["retrieveGroupDetail"];
    put: operations["updateGroupDetail"];
    delete: operations["destroyGroupDetail"];
    patch: operations["partialUpdateGroupDetail"];
  };
  "/api/groups/{group_pk}/databases/": {
    get: operations["listDatabasePermissions"];
    post: operations["createList"];
  };
  "/api/groups/{group_pk}/databases/{id}/": {
    get: operations["retrieveDatabasePermission"];
    delete: operations["destroyDatabasePermission"];
    patch: operations["partialUpdateDatabasePermission"];
  };
  "/api/invitations/me/": {
    get: operations["listPendingInvitations"];
  };
  "/api/invitations/": {
    get: operations["listInvitations"];
    post: operations["createInvitation"];
  };
  "/api/invited/recipes/": {
    /** List config of current version of each package. */
    get: operations["listInvitedRecipes"];
  };
  "/api/marketplace/listings/": {
    get: operations["listListingMetadatas"];
  };
  "/api/marketplace/listings/{id}/": {
    get: operations["retrieveListingMetadata"];
  };
  "/api/marketplace/tags/": {
    get: operations["listTags"];
  };
  "/api/me/": {
    get: operations["retrieveMe"];
  };
  "/api/memberships/{id}/": {
    /** Detail view for an organization's memberships. */
    get: operations["retrieveMembership"];
    /** Detail view for an organization's memberships. */
    put: operations["updateMembership"];
    /** Detail view for an organization's memberships. */
    delete: operations["destroyMembership"];
    /** Detail view for an organization's memberships. */
    patch: operations["partialUpdateMembership"];
  };
  "/api/organizations/": {
    get: operations["listOrganizations"];
    post: operations["createOrganization"];
  };
  "/api/organizations/{organization_pk}/members/{id}/": {
    get: operations["retrieveUserDetail"];
  };
  "/api/organizations/{organization_pk}/members/{id}/errors/": {
    /** View to show Rollbar errors for an organization's team member. */
    get: operations["listOrganizationMemberErrors"];
  };
  "/api/organizations/{organization_pk}/groups/": {
    get: operations["listGroups"];
    post: operations["createGroup"];
  };
  "/api/organizations/{organization_pk}/deployments/": {
    /** View for admins to get/create/update/delete deployments */
    get: operations["listPackageDeployments"];
    /** View for admins to get/create/update/delete deployments */
    post: operations["createPackageDeployment"];
  };
  "/api/organizations/{organization_pk}/bricks/": {
    get: operations["listOrganizationBricks"];
  };
  "/api/organizations/{organization_pk}/blueprints/": {
    get: operations["listDeployableBlueprints"];
  };
  "/api/organizations/{organization_pk}/integrations/": {
    get: operations["listServiceAuthMetas"];
  };
  "/api/organizations/{organization_pk}/memberships/": {
    /** List view of an organization's memberships. */
    get: operations["listMemberships"];
  };
  "/api/organizations/{organization_pk}/databases/{id}/": {
    get: operations["retrieveDatabase"];
    put: operations["updateDatabase"];
    delete: operations["destroyDatabase"];
    patch: operations["partialUpdateDatabase"];
  };
  "/api/organizations/{organization_pk}/databases/": {
    get: operations["listDatabases"];
    post: operations["createDatabase"];
  };
  "/api/permissions/{id}/": {
    get: operations["retrieveGroupPackagePermission"];
    put: operations["updateGroupPackagePermission"];
    delete: operations["destroyGroupPackagePermission"];
    patch: operations["partialUpdateGroupPackagePermission"];
  };
  "/api/recipes/": {
    /** List config of current version of each package. */
    get: operations["listRecipes"];
  };
  "/api/recipes/{name}": {
    get: operations["retrievePackageConfig"];
  };
  "/api/services/shared/": {
    get: operations["listSanitizedAuths"];
    post: operations["createEditableAuth"];
  };
  "/api/services/shared/{id}/": {
    get: operations["retrieveEditableAuth"];
    put: operations["updateEditableAuth"];
    delete: operations["destroyEditableAuth"];
    patch: operations["partialUpdateEditableAuth"];
  };
  "/api/services/": {
    /** List config of current version of each package. */
    get: operations["listServices"];
  };
  "/api/settings/": {
    get: operations["retrieveSettings"];
    put: operations["updateSettings"];
    patch: operations["partialUpdateSettings"];
  };
  "/api/templates/": {
    /** List YAML templates for the workshop view. */
    get: operations["listBrickTemplates"];
  };
  "/api/deployments/{id}/messages/": {
    post: operations["createDeploymentMessage"];
  };
  "/api/deployments/{id}/alerts/": {
    post: operations["createDeploymentAlert"];
  };
  "/api/events/": {
    post: operations["createEventList"];
  };
  "/api/groups/{id}/memberships/": {
    /** View to add a user to a group membership. */
    post: operations["createGroupMembership"];
  };
  "/api/identify/": {
    post: operations["createIdentify"];
  };
  "/api/invitations/{id}/accept/": {
    post: operations["acceptPendingInvitation"];
  };
  "/api/invitations/{id}/reject/": {
    post: operations["rejectPendingInvitation"];
  };
  "/api/onboarding/": {
    post: operations["createOnboarding"];
  };
  "/api/proxy/": {
    /** API authentication proxy. */
    post: operations["createProxiedRequest"];
  };
  "/api/run/": {
    post: operations["executeBrick"];
  };
  "/api/deployments/{deployment_pk}/groups/{id}/": {
    delete: operations["destroyDeploymentPermission"];
  };
  "/api/groups/{group_pk}/memberships/{id}/": {
    /** View to add a user to a group membership. */
    delete: operations["destroyGroupMembership"];
  };
  "/api/invitations/{id}/": {
    delete: operations["destroyInvitation"];
  };
}

export interface components {
  schemas: {
    AuditEvent: {
      id?: string;
      actor: {
        id?: string;
        email?: string;
      };
      target_object: {
        id: string;
        content_type?: string;
        label?: string;
      };
      action_object: {
        id: string;
        content_type?: string;
        label?: string;
      };
      action_type: string;
      data?: { [key: string]: unknown } | null;
      timestamp?: string;
    };
    PackageConfigList: {
      apiVersion: string;
      kind: string;
      metadata: { [key: string]: unknown };
    };
    PackageMeta: {
      /** Surrogate primary key */
      id?: string;
      /** Unique package identifier, including the scope and collection */
      name: string;
      /** Human-readable name */
      verbose_name?: string | null;
      version?: string;
      kind: string;
      sharing: {
        public?: boolean;
        organizations?: string[];
      };
    };
    Package: {
      /** Surrogate primary key */
      id?: string;
      name?: string;
      kind: string;
      version?: string;
      share_dependencies?: boolean;
      config: string;
      public?: boolean;
      organizations?: string[];
      updated_at?: string;
    };
    PackageVersion: {
      id?: string;
      version?: string;
      config: { [key: string]: unknown };
      raw_config?: string;
      created_at?: string;
      updated_at?: string;
    };
    Database: {
      id?: string;
      name: string;
      organization_id?: string;
      created_at?: string;
    };
    Record: {
      id: string;
      data: { [key: string]: unknown };
      created_at?: string;
    };
    UserDeploymentDetail: {
      id?: string;
      name?: string;
      created_at?: string;
      updated_at?: string;
      package?: {
        id: string;
        version?: string;
        package_id: string;
        name: string;
        config: { [key: string]: unknown };
      };
      bindings?: {
        id?: string;
        created_at?: string;
        /** Key for named integration dependencies */
        key?: string | null;
        auth: {
          id?: string;
          service_id: string;
          label?: string | null;
        };
      }[];
      active?: boolean;
    };
    DeploymentTelemetry: {
      /** The UID of the PixieBrix extension instance (varies by install) */
      uid: string;
      /** The version of the PixieBrix extension */
      version: string;
      active?: { [key: string]: unknown }[];
    };
    DeploymentDetail: {
      id?: string;
      name: string;
      created_at?: string;
      updated_at?: string;
      package?: {
        id: string;
        version?: string;
        package_id: string;
        name: string;
        config: { [key: string]: unknown };
      };
      bindings?: {
        id?: string;
        created_at?: string;
        /** Key for named integration dependencies */
        key?: string | null;
        auth: {
          id?: string;
          service_id: string;
          label?: string | null;
        };
      }[];
      package_version: string;
      services: {
        auth: string;
      }[];
      active?: boolean;
    };
    DeploymentReportMetadata: {
      id: string;
      /** A human-readable name/label for the report */
      name: string;
    };
    DeploymentReport: {
      /** The id of the report */
      id: string;
      /** The name of the report */
      name: string;
      /** Report generation timestamp */
      timestamp: string;
      data: {
        email: string;
        timestamp: string;
        event_name: string;
        event_label: string;
        value: number;
      }[];
    };
    DeploymentPermission: {
      id?: string;
      group_id: string;
      group_name?: string;
      created_at?: string;
    };
    ActiveDeployment: {
      client_uuid: string;
      user: {
        id?: string;
        email?: string;
      };
      created_at?: string;
      updated_at?: string;
      version?: string;
      client_version?: string;
    };
    ExtensionToken: {
      extension_token: string;
    };
    UserExtension: {
      id: string;
      createTimestamp: string;
      updateTimestamp: string;
    };
    GroupPackagePermission: {
      id?: string;
      permission: 1 | 2;
      created_at?: string;
      package_name: string;
    };
    ServiceAuthPermission: {
      id?: string;
      permission?: 1 | 2;
      created_at?: string;
      label: string;
      service_id: string;
    };
    GroupDetail: {
      id?: string;
      name: string;
      created_at?: string;
      memberships?: {
        id?: string;
        created_at?: string;
        user: {
          id?: string;
          name?: string;
          email?: string;
        };
      }[];
    };
    DatabasePermission: {
      id?: string;
      database_name?: string;
      database: string;
      permission?: 1 | 2;
      created_at?: string;
    };
    PendingInvitation: {
      id?: string;
      inviter: {
        id?: string;
        name?: string;
        email?: string;
      };
      organization: {
        id?: string;
        name: string;
        members?: {
          id?: number;
          user?: {
            id?: string;
            name?: string;
            email?: string;
          };
          role: 1 | 2 | 3 | 4;
          groups?: {
            id?: string;
            name: string;
            num_members?: number;
            created_at?: string;
          }[];
        }[];
        invitations?: {
          id?: string;
          email: string;
          role?: 1 | 2 | 3 | 4;
          inviter?: {
            id?: string;
            name?: string;
            email?: string;
          };
          organization: string;
          status?: 1 | 2 | 3 | 4;
        }[];
        scope?: string;
      };
    };
    Invitation: {
      id?: string;
      email: string;
      role?: 1 | 2 | 3 | 4;
      inviter?: {
        id?: string;
        name?: string;
        email?: string;
      };
      organization: string;
      status?: 1 | 2 | 3 | 4;
    };
    ListingMetadata: {
      /** Surrogate key of the listing */
      id?: string;
      package: {
        /** Surrogate primary key */
        id?: string;
        name?: string;
        kind: string;
        description: string;
        version?: string;
      };
      tags: {
        /** Surrogate key for the tag */
        id?: string;
        /** The name/caption to show in the tag */
        name: string;
        /** The URL slug for the tag */
        slug?: string;
        /** Font Awesome 5 icon and css class to show with the tag, e.g., fas fa-coffee */
        fa_icon?: string | null;
        /** The sub-type/category of the tag */
        subtype?: "generic" | "role" | "service";
        created_at?: string;
        updated_at?: string;
      }[];
      image: {
        /** Alt text for the logo */
        alt_text?: string | null;
        url: string;
      };
      created_at?: string;
      updated_at?: string;
    };
    Tag: {
      /** Surrogate key for the tag */
      id?: string;
      /** The name/caption to show in the tag */
      name: string;
      /** The URL slug for the tag */
      slug?: string;
      /** Font Awesome 5 icon and css class to show with the tag, e.g., fas fa-coffee */
      fa_icon?: string | null;
      /** The sub-type/category of the tag */
      subtype?: "generic" | "role" | "service";
      created_at?: string;
      updated_at?: string;
    };
    Me: {
      id?: string;
      scope?: string | null;
      email?: string;
      name?: string;
      organization?: {
        id?: string;
        name: string;
        scope?: string | null;
      };
      telemetry_organization?: {
        id?: string;
        name: string;
        scope?: string | null;
      };
      is_onboarded?: string;
      flags?: string;
    };
    Membership: {
      id?: number;
      user?: {
        id?: string;
        name?: string;
        email?: string;
      };
      role: 1 | 2 | 3 | 4;
      groups?: {
        id?: string;
        name: string;
        num_members?: number;
        created_at?: string;
      }[];
    };
    Organization: {
      id?: string;
      name: string;
      scope?: string;
    };
    UserDetail: {
      id?: string;
      name?: string;
      email?: string;
      groups: {
        id?: string;
        group_id: string;
        group_name: string;
        created_at?: string;
      }[];
      last_login?: string | null;
      date_joined?: string;
      membership?: {
        id?: number;
        role: 1 | 2 | 3 | 4;
      };
    };
    Group: {
      id?: string;
      name: string;
      num_members?: number;
      created_at?: string;
    };
    Deployment: {
      id?: string;
      name: string;
      created_at?: string;
      package?: {
        id: string;
        version?: string;
        package_id: string;
        name: string;
      };
      package_version: string;
      services: {
        auth: string;
      }[];
    };
    DeployableBlueprint: {
      id?: string;
      package_id: string;
      registry_id: string;
      name: string;
      version?: string;
      config: { [key: string]: unknown };
    };
    ServiceAuthMeta: {
      id?: string;
      label?: string | null;
      service_id: string;
      service_name: string;
    };
    PackageConfig: {
      /** Surrogate primary key */
      id?: string;
      /** Unique package identifier, including the scope and collection */
      name: string;
      /** Human-readable name */
      verbose_name?: string | null;
      version?: string;
      kind: string;
      config: { [key: string]: unknown };
    };
    SanitizedAuth: {
      id?: string;
      label: string | null;
      organization: {
        id?: string;
        name: string;
      };
      service: {
        /** Surrogate primary key */
        id?: string;
        /** Unique package identifier, including the scope and collection */
        name: string;
        config: { [key: string]: unknown };
      };
      config?: string;
      editable?: string;
    };
    EditableAuth: {
      id?: string;
      label: string | null;
      organization: string | null;
      config: { [key: string]: unknown };
      created_at?: string;
      service: string;
      updated_at?: string;
      editable?: string;
    };
    Settings: {
      scope?: string | null;
    };
    BrickTemplate: {
      name: string;
      body: string;
    };
    UserDatabase: {
      id?: string;
      user?: string;
      name: string;
      organization_id?: string;
      created_at?: string;
    };
    DeploymentMessage: {
      recipient: string;
      subject: string;
      message: string;
    };
    EventList: {
      events?: {
        data?: { [key: string]: unknown };
        uid?: string;
        event?: string;
      }[];
      timestamp?: string;
    };
    GroupMembership: {
      id?: string;
      group_id: string;
      group_name: string;
      created_at?: string;
    };
    Identify: {
      uid?: string;
      data?: { [key: string]: unknown };
    };
    Onboarding: {
      external?: boolean;
    };
    ProxiedRequest: {
      /** An absolute/relative URL for the request */
      url: string;
      /** The search params for the request */
      params?: { [key: string]: unknown };
      /** The headers for the request */
      headers?: { [key: string]: unknown };
      /** The HTTP method for the request */
      method?:
        | "GET"
        | "POST"
        | "PUT"
        | "PATCH"
        | "DELETE"
        | "get"
        | "post"
        | "put"
        | "patch"
        | "delete";
      /** The application/json body of the request */
      data?: { [key: string]: unknown };
      /** The id of the service to authenticate the request */
      service_id?: string;
      /** The id of the credential to authenticate the request */
      auth_id: string;
    };
    ExecutableBrick: {
      id: string;
      args?: { [key: string]: unknown };
    };
  };
}

export interface operations {
  listAuditEvents: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["AuditEvent"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["AuditEvent"][];
        };
      };
    };
  };
  listAuditGroups: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuditEvent"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["AuditEvent"][];
        };
      };
    };
  };
  listAuditDeployments: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuditEvent"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["AuditEvent"][];
        };
      };
    };
  };
  /** List config of current version of each package. */
  listPackageConfigLists: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  listPackageMetas: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PackageMeta"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PackageMeta"][];
        };
      };
    };
  };
  createPackage: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Package"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Package"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Package"];
        "application/x-www-form-urlencoded": components["schemas"]["Package"];
        "multipart/form-data": components["schemas"]["Package"];
      };
    };
  };
  retrievePackage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Package"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Package"];
        };
      };
    };
  };
  updatePackage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Package"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Package"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Package"];
        "application/x-www-form-urlencoded": components["schemas"]["Package"];
        "multipart/form-data": components["schemas"]["Package"];
      };
    };
  };
  destroyPackage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  listPackageVersions: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PackageVersion"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PackageVersion"][];
        };
      };
    };
  };
  listUserDatabases: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"][];
        };
      };
    };
  };
  createUserDatabase: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserDatabase"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserDatabase"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDatabase"];
        "application/x-www-form-urlencoded": components["schemas"]["UserDatabase"];
        "multipart/form-data": components["schemas"]["UserDatabase"];
      };
    };
  };
  retrieveUserDatabase: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"];
        };
      };
    };
  };
  destroyUserDatabase: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  updateUserDatabase: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserDatabase"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserDatabase"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDatabase"];
        "application/x-www-form-urlencoded": components["schemas"]["UserDatabase"];
        "multipart/form-data": components["schemas"]["UserDatabase"];
      };
    };
  };
  listRecords: {
    parameters: {
      path: {
        database_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Record"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Record"][];
          "text/csv; version=2.0": components["schemas"]["Record"][];
        };
      };
    };
  };
  updateRecord: {
    parameters: {
      path: {
        database_pk: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Record"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Record"];
          "text/csv; version=2.0": components["schemas"]["Record"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Record"];
        "application/x-www-form-urlencoded": components["schemas"]["Record"];
        "multipart/form-data": components["schemas"]["Record"];
      };
    };
  };
  createRecord: {
    parameters: {
      path: {
        database_pk: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Record"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Record"];
          "text/csv; version=2.0": components["schemas"]["Record"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Record"];
        "application/x-www-form-urlencoded": components["schemas"]["Record"];
        "multipart/form-data": components["schemas"]["Record"];
      };
    };
  };
  retrieveRecordDetail: {
    parameters: {
      path: {
        database_pk: string;
        key: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Record"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Record"];
          "text/csv; version=2.0": components["schemas"]["Record"];
        };
      };
    };
  };
  updateRecordDetail: {
    parameters: {
      path: {
        database_pk: string;
        key: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Record"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Record"];
          "text/csv; version=2.0": components["schemas"]["Record"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Record"];
        "application/x-www-form-urlencoded": components["schemas"]["Record"];
        "multipart/form-data": components["schemas"]["Record"];
      };
    };
  };
  /** View for individual users to report/retrieve available deployments. */
  listUserDeploymentDetails: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserDeploymentDetail"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserDeploymentDetail"][];
        };
      };
    };
  };
  /** Record which deployments the user has installed, and return list of available deployments. */
  telemetryListUserDeploymentDetail: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserDeploymentDetail"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserDeploymentDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentTelemetry"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentTelemetry"];
        "multipart/form-data": components["schemas"]["DeploymentTelemetry"];
      };
    };
  };
  /** View for admins to get/create/update/delete deployments */
  retrievePackageDeployment: {
    parameters: {
      path: {
        /** A UUID string identifying this package deployment. */
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeploymentDetail"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeploymentDetail"];
        };
      };
    };
  };
  /** View for admins to get/create/update/delete deployments */
  updatePackageDeployment: {
    parameters: {
      path: {
        /** A UUID string identifying this package deployment. */
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeploymentDetail"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeploymentDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentDetail"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentDetail"];
        "multipart/form-data": components["schemas"]["DeploymentDetail"];
      };
    };
  };
  /** View for admins to get/create/update/delete deployments */
  destroyPackageDeployment: {
    parameters: {
      path: {
        /** A UUID string identifying this package deployment. */
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** View for admins to get/create/update/delete deployments */
  partialUpdatePackageDeployment: {
    parameters: {
      path: {
        /** A UUID string identifying this package deployment. */
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeploymentDetail"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeploymentDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentDetail"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentDetail"];
        "multipart/form-data": components["schemas"]["DeploymentDetail"];
      };
    };
  };
  listDeploymentReportMetadatas: {
    parameters: {
      path: {
        deployment_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["DeploymentReportMetadata"][];
          "text/csv; version=1.0": components["schemas"]["DeploymentReportMetadata"][];
        };
      };
    };
  };
  retrieveDeploymentReport: {
    parameters: {
      path: {
        deployment_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["DeploymentReport"];
          "text/csv; version=1.0": components["schemas"]["DeploymentReport"];
        };
      };
    };
  };
  listDeploymentPermissions: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeploymentPermission"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeploymentPermission"][];
        };
      };
    };
  };
  createDeploymentPermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeploymentPermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeploymentPermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentPermission"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentPermission"];
        "multipart/form-data": components["schemas"]["DeploymentPermission"];
      };
    };
  };
  listActiveDeployments: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ActiveDeployment"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ActiveDeployment"][];
        };
      };
    };
  };
  /** List config of current version of each package. */
  listExtentionPoints: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  /** Return the token for the current user. */
  retrieveExtensionToken: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["ExtensionToken"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["ExtensionToken"];
        };
      };
    };
  };
  listUserExtensions: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserExtension"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserExtension"][];
        };
      };
    };
  };
  retrieveUserExtension: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserExtension"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserExtension"];
        };
      };
    };
  };
  updateUserExtension: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["UserExtension"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["UserExtension"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserExtension"];
        "application/x-www-form-urlencoded": components["schemas"]["UserExtension"];
        "multipart/form-data": components["schemas"]["UserExtension"];
      };
    };
  };
  destroyUserExtension: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** List config of current version of each package. */
  listFeaturedRecipes: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  listGroupPackagePermissions: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["GroupPackagePermission"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["GroupPackagePermission"][];
        };
      };
    };
  };
  createGroupPackagePermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["GroupPackagePermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["GroupPackagePermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupPackagePermission"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupPackagePermission"];
        "multipart/form-data": components["schemas"]["GroupPackagePermission"];
      };
    };
  };
  listServiceAuthPermissions: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthPermission"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthPermission"][];
        };
      };
    };
  };
  createServiceAuthPermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthPermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthPermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceAuthPermission"];
        "application/x-www-form-urlencoded": components["schemas"]["ServiceAuthPermission"];
        "multipart/form-data": components["schemas"]["ServiceAuthPermission"];
      };
    };
  };
  retrieveServiceAuthPermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthPermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthPermission"];
        };
      };
    };
  };
  updateServiceAuthPermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthPermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthPermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceAuthPermission"];
        "application/x-www-form-urlencoded": components["schemas"]["ServiceAuthPermission"];
        "multipart/form-data": components["schemas"]["ServiceAuthPermission"];
      };
    };
  };
  destroyServiceAuthPermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateServiceAuthPermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthPermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthPermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceAuthPermission"];
        "application/x-www-form-urlencoded": components["schemas"]["ServiceAuthPermission"];
        "multipart/form-data": components["schemas"]["ServiceAuthPermission"];
      };
    };
  };
  retrieveGroupDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupDetail"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupDetail"];
        };
      };
    };
  };
  updateGroupDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupDetail"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupDetail"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupDetail"];
        "multipart/form-data": components["schemas"]["GroupDetail"];
      };
    };
  };
  destroyGroupDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateGroupDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupDetail"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupDetail"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupDetail"];
        "multipart/form-data": components["schemas"]["GroupDetail"];
      };
    };
  };
  listDatabasePermissions: {
    parameters: {
      path: {
        group_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DatabasePermission"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DatabasePermission"][];
        };
      };
    };
  };
  createList: {
    parameters: {
      path: {
        group_pk: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": { [key: string]: unknown };
          "application/vnd.pixiebrix.api+json; version=2.0": {
            [key: string]: unknown;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: unknown };
        "application/x-www-form-urlencoded": { [key: string]: unknown };
        "multipart/form-data": { [key: string]: unknown };
      };
    };
  };
  retrieveDatabasePermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DatabasePermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DatabasePermission"];
        };
      };
    };
  };
  destroyDatabasePermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateDatabasePermission: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DatabasePermission"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DatabasePermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DatabasePermission"];
        "application/x-www-form-urlencoded": components["schemas"]["DatabasePermission"];
        "multipart/form-data": components["schemas"]["DatabasePermission"];
      };
    };
  };
  listPendingInvitations: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PendingInvitation"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PendingInvitation"][];
        };
      };
    };
  };
  listInvitations: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Invitation"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Invitation"][];
        };
      };
    };
  };
  createInvitation: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Invitation"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Invitation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invitation"];
        "application/x-www-form-urlencoded": components["schemas"]["Invitation"];
        "multipart/form-data": components["schemas"]["Invitation"];
      };
    };
  };
  /** List config of current version of each package. */
  listInvitedRecipes: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  listListingMetadatas: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ListingMetadata"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ListingMetadata"][];
        };
      };
    };
  };
  retrieveListingMetadata: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ListingMetadata"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ListingMetadata"];
        };
      };
    };
  };
  listTags: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Tag"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Tag"][];
        };
      };
    };
  };
  retrieveMe: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Me"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Me"];
        };
      };
    };
  };
  /** Detail view for an organization's memberships. */
  retrieveMembership: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Membership"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Membership"];
        };
      };
    };
  };
  /** Detail view for an organization's memberships. */
  updateMembership: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Membership"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Membership"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Membership"];
        "application/x-www-form-urlencoded": components["schemas"]["Membership"];
        "multipart/form-data": components["schemas"]["Membership"];
      };
    };
  };
  /** Detail view for an organization's memberships. */
  destroyMembership: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Detail view for an organization's memberships. */
  partialUpdateMembership: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Membership"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Membership"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Membership"];
        "application/x-www-form-urlencoded": components["schemas"]["Membership"];
        "multipart/form-data": components["schemas"]["Membership"];
      };
    };
  };
  listOrganizations: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Organization"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Organization"][];
        };
      };
    };
  };
  createOrganization: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Organization"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Organization"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Organization"];
        "application/x-www-form-urlencoded": components["schemas"]["Organization"];
        "multipart/form-data": components["schemas"]["Organization"];
      };
    };
  };
  retrieveUserDetail: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["UserDetail"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["UserDetail"];
        };
      };
    };
  };
  /** View to show Rollbar errors for an organization's team member. */
  listOrganizationMemberErrors: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": { [key: string]: unknown }[];
          "application/vnd.pixiebrix.api+json; version=1.0": {
            [key: string]: unknown;
          }[];
        };
      };
    };
  };
  listGroups: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Group"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Group"][];
        };
      };
    };
  };
  createGroup: {
    parameters: {
      path: {
        organization_pk: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Group"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Group"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group"];
        "application/x-www-form-urlencoded": components["schemas"]["Group"];
        "multipart/form-data": components["schemas"]["Group"];
      };
    };
  };
  /** View for admins to get/create/update/delete deployments */
  listPackageDeployments: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Deployment"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Deployment"][];
        };
      };
    };
  };
  /** View for admins to get/create/update/delete deployments */
  createPackageDeployment: {
    parameters: {
      path: {
        organization_pk: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Deployment"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Deployment"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentTelemetry"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentTelemetry"];
        "multipart/form-data": components["schemas"]["DeploymentTelemetry"];
      };
    };
  };
  listOrganizationBricks: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageMeta"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageMeta"][];
        };
      };
    };
  };
  listDeployableBlueprints: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["DeployableBlueprint"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["DeployableBlueprint"][];
        };
      };
    };
  };
  listServiceAuthMetas: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["ServiceAuthMeta"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["ServiceAuthMeta"][];
        };
      };
    };
  };
  /** List view of an organization's memberships. */
  listMemberships: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Membership"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Membership"][];
        };
      };
    };
  };
  retrieveDatabase: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"];
        };
      };
    };
  };
  updateDatabase: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Database"];
        "application/x-www-form-urlencoded": components["schemas"]["Database"];
        "multipart/form-data": components["schemas"]["Database"];
      };
    };
  };
  destroyDatabase: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateDatabase: {
    parameters: {
      path: {
        organization_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Database"];
        "application/x-www-form-urlencoded": components["schemas"]["Database"];
        "multipart/form-data": components["schemas"]["Database"];
      };
    };
  };
  listDatabases: {
    parameters: {
      path: {
        organization_pk: string;
      };
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"][];
        };
      };
    };
  };
  createDatabase: {
    parameters: {
      path: {
        organization_pk: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["Database"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["Database"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Database"];
        "application/x-www-form-urlencoded": components["schemas"]["Database"];
        "multipart/form-data": components["schemas"]["Database"];
      };
    };
  };
  retrieveGroupPackagePermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupPackagePermission"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupPackagePermission"];
        };
      };
    };
  };
  updateGroupPackagePermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupPackagePermission"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupPackagePermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupPackagePermission"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupPackagePermission"];
        "multipart/form-data": components["schemas"]["GroupPackagePermission"];
      };
    };
  };
  destroyGroupPackagePermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateGroupPackagePermission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupPackagePermission"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupPackagePermission"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupPackagePermission"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupPackagePermission"];
        "multipart/form-data": components["schemas"]["GroupPackagePermission"];
      };
    };
  };
  /** List config of current version of each package. */
  listRecipes: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  retrievePackageConfig: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["PackageConfig"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["PackageConfig"];
        };
      };
    };
  };
  listSanitizedAuths: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["SanitizedAuth"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["SanitizedAuth"][];
        };
      };
    };
  };
  createEditableAuth: {
    parameters: {};
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["EditableAuth"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["EditableAuth"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditableAuth"];
        "application/x-www-form-urlencoded": components["schemas"]["EditableAuth"];
        "multipart/form-data": components["schemas"]["EditableAuth"];
      };
    };
  };
  retrieveEditableAuth: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["EditableAuth"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["EditableAuth"];
        };
      };
    };
  };
  updateEditableAuth: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["EditableAuth"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["EditableAuth"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditableAuth"];
        "application/x-www-form-urlencoded": components["schemas"]["EditableAuth"];
        "multipart/form-data": components["schemas"]["EditableAuth"];
      };
    };
  };
  destroyEditableAuth: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  partialUpdateEditableAuth: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["EditableAuth"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["EditableAuth"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditableAuth"];
        "application/x-www-form-urlencoded": components["schemas"]["EditableAuth"];
        "multipart/form-data": components["schemas"]["EditableAuth"];
      };
    };
  };
  /** List config of current version of each package. */
  listServices: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PackageConfigList"][];
          "application/vnd.pixiebrix.api+json": components["schemas"]["PackageConfigList"][];
        };
      };
    };
  };
  retrieveSettings: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Settings"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Settings"];
        };
      };
    };
  };
  updateSettings: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Settings"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Settings"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Settings"];
        "application/x-www-form-urlencoded": components["schemas"]["Settings"];
        "multipart/form-data": components["schemas"]["Settings"];
      };
    };
  };
  partialUpdateSettings: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json; version=1.0": components["schemas"]["Settings"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Settings"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Settings"];
        "application/x-www-form-urlencoded": components["schemas"]["Settings"];
        "multipart/form-data": components["schemas"]["Settings"];
      };
    };
  };
  /** List YAML templates for the workshop view. */
  listBrickTemplates: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["BrickTemplate"][];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["BrickTemplate"][];
        };
      };
    };
  };
  createDeploymentMessage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["DeploymentMessage"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["DeploymentMessage"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeploymentMessage"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentMessage"];
        "multipart/form-data": components["schemas"]["DeploymentMessage"];
      };
    };
  };
  createDeploymentAlert: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json; version=1.0": { [key: string]: unknown };
          "application/vnd.pixiebrix.api+json; version=1.0": {
            [key: string]: unknown;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: unknown };
        "application/x-www-form-urlencoded": { [key: string]: unknown };
        "multipart/form-data": { [key: string]: unknown };
      };
    };
  };
  createEventList: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["EventList"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["EventList"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventList"];
        "application/x-www-form-urlencoded": components["schemas"]["EventList"];
        "multipart/form-data": components["schemas"]["EventList"];
      };
    };
  };
  /** View to add a user to a group membership. */
  createGroupMembership: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["GroupMembership"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["GroupMembership"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupMembership"];
        "application/x-www-form-urlencoded": components["schemas"]["GroupMembership"];
        "multipart/form-data": components["schemas"]["GroupMembership"];
      };
    };
  };
  createIdentify: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["Identify"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Identify"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Identify"];
        "application/x-www-form-urlencoded": components["schemas"]["Identify"];
        "multipart/form-data": components["schemas"]["Identify"];
      };
    };
  };
  acceptPendingInvitation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PendingInvitation"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PendingInvitation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PendingInvitation"];
        "application/x-www-form-urlencoded": components["schemas"]["PendingInvitation"];
        "multipart/form-data": components["schemas"]["PendingInvitation"];
      };
    };
  };
  rejectPendingInvitation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        headers: {};
        content: {
          "application/json; version=2.0": components["schemas"]["PendingInvitation"];
          "application/vnd.pixiebrix.api+json; version=2.0": components["schemas"]["PendingInvitation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PendingInvitation"];
        "application/x-www-form-urlencoded": components["schemas"]["PendingInvitation"];
        "multipart/form-data": components["schemas"]["PendingInvitation"];
      };
    };
  };
  createOnboarding: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["Onboarding"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["Onboarding"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Onboarding"];
        "application/x-www-form-urlencoded": components["schemas"]["Onboarding"];
        "multipart/form-data": components["schemas"]["Onboarding"];
      };
    };
  };
  /** API authentication proxy. */
  createProxiedRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["ProxiedRequest"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["ProxiedRequest"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProxiedRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProxiedRequest"];
        "multipart/form-data": components["schemas"]["ProxiedRequest"];
      };
    };
  };
  executeBrick: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json; version=1.0": components["schemas"]["ExecutableBrick"];
          "application/vnd.pixiebrix.api+json; version=1.0": components["schemas"]["ExecutableBrick"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExecutableBrick"];
        "application/x-www-form-urlencoded": components["schemas"]["ExecutableBrick"];
        "multipart/form-data": components["schemas"]["ExecutableBrick"];
      };
    };
  };
  destroyDeploymentPermission: {
    parameters: {
      path: {
        deployment_pk: string;
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** View to add a user to a group membership. */
  destroyGroupMembership: {
    parameters: {
      path: {
        group_pk: string;
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  destroyInvitation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
}

export interface external {}
